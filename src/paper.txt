WCMは、メニーコアを用いたDAGスケジューリングにおける最新のコア割り当て手法である。

WCMでは次の2ステップで各ノードにコアを割り当てる。
ステップ1では、ノードi のmコアでのWCETを$C^m_i$, 周期を$T_i$とすると、$C^m_i \leq T_i$を満たす最小のコア数を計算し、そのコア数を割り当てる。ここで、初めから$C^m_i \leq T_i$を満たすノードは一コアが割り当てられる。

ステップ2では、ステップ1でコアが余った場合、追加の割り当てを行う。追加の割り当てでは、WCRT(Equation (13) in Ref~\cite{kobatomo})が最大のパス（入口と出口ノードを含む）を求め、その中で、最大のWCRT (Equation (1) in Ref~\cite{kobatomo})を持つノードに対して、追加で一コア割り当てる。一コア割り当てが行われると、そのノードのWCRTが減少しパス全体のWCRTも減少するため、パスを再検索する。コアの余りがあるまでこの割り当てを繰り返す。

WCMの研究は、一般的な非クラスタ型のメニーコアを想定しているため、実際にコアをどのクラスタから確保するのかという部分は提案されていない。
また、WCMは、一部のノードに過剰にコアが集まりやすいといったデメリットが存在する。
そこで我々は、各ノードの要求コア数の決定をWCMで行い、動的なシミュレーションを行うことでクラスタ間通信の評価を行った。
評価のため、クラスタ選択と割り当てコア数のしきい値を追加することで、WCMを以下4つのパターンで評価を行った。
\begin{itemize}
    \item {T-WCM：クラスタの選択はランダムに行う。また、一ノードに割り当てられるコア数のしきい値を設ける。}
    \item {PT-WCM: クラスタの選択を提案手法（Algorithm~{cluster}）で行い、各ノードのコア数の決定をWCMで行う。また、一ノードに割り当てられるコア数のしきい値を設ける。}
    \item {N-WCM: クラスタの選択はランダムに行う。また、一ノード当たりのコア数のしきい値はない。}
 \item {PN-WCM: クラスタの選択を提案手法（Algorithm~{cluster}）で行い、各ノードのコア数の決定をWCMで行う。また、一ノードに割り当てられるコア数のしきい値はない。}
\end{itemize}
T-WCMとN-WCMでは使用するクラスタをランダムに選択しているが、これはWCMにおいてクラスタ選択の部分が提案されていないためである。ランダムにクラスタを選択していき、これを選ばれたクラスタの残りコア数の合計がノードの要求コア数を超えるまで行う。このランダム選択は、フローチャート(Figure~\ref{flowchart}のハイライト部分で行われる。) N-WCMでは各ノードの割り当てコア数の上限値を設けていないため、純粋なWCMといえる。しかし、いづれに4つにおいても、一コアが要求するコア数の最大値は、$total\_core\_num$としている。

WCMでは、使用可能なコア数はプロセッサ内トータルコア数としてある。これは、割り当て後にスケジューラビリティテストを行いスケジュール判定をするためである。本研究では、クラスタ間通信の発生回数と、それに伴う応答時間への影響を評価するため、今回各ノードに割り当てるコア数の合計は、必ずしもプロセッサのトータルコア数とはならない。しかし、比較する手法間で各ノードの要求コア数の合計値並びに使用可能コア数は同じである。



